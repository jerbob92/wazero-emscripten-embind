// Code generated by wazero-emscripten-embind, DO NOT EDIT.
package {{ $.Pkg }}

import (
    "context"

    "github.com/jerbob92/wazero-emscripten-embind"
)

{{ range $index, $class := $.Classes }}
type {{ $class.GoName }} struct {
    embind.ClassBase
}

func (class *{{ $class.GoName }}) Clone(ctx context.Context) (*{{ $class.GoName }}, error) {
	res, err := class.CloneInstance(ctx, class)
	if err != nil {
		return nil, err
	}
	if res == nil {
		return nil, nil
	}
	return res.(*{{ $class.GoName }}), nil
}

func (class *{{ $class.GoName }}) Delete(ctx context.Context) error {
	return class.DeleteInstance(ctx, class)
}

func (class *{{ $class.GoName }}) DeleteLater(ctx context.Context) (embind.ClassBase, error) {
	return class.DeleteInstanceLater(ctx, class)
}

func (class *{{ $class.GoName }}) IsDeleted(ctx context.Context) bool {
	return class.IsInstanceDeleted(ctx, class)
}

func (class *{{ $class.GoName }}) IsAliasOf(ctx context.Context, second embind.ClassBase) (bool, error) {
	return class.IsAliasOfInstance(ctx, class, second)
}

func (class *{{ $class.GoName }}) CallMethod(ctx context.Context, name string, arguments ...any) (any, error) {
	return class.CallInstanceMethod(ctx, class, name, arguments...)
}

func (class *{{ $class.GoName }}) SetProperty(ctx context.Context, name string, value any) error {
	return class.SetInstanceProperty(ctx, class, name, value)
}

func (class *{{ $class.GoName }}) GetProperty(ctx context.Context, name string) (any, error) {
	return class.GetInstanceProperty(ctx, class, name)
}

{{ range $index, $property := $class.Properties }}
func (class *{{ $class.GoName }}) GetProperty{{ $property.GoName }}(ctx context.Context) ({{ $property.GetterType }}, error)  {
    res, err := class.GetProperty(ctx, "{{ $property.Name }}")
    if err != nil {
        return {{ $property.ErrorValue }}, err
    }

	if res == nil {
		return {{ $property.ErrorValue }}, nil
	}

    return res.({{ $property.GetterType }}), nil
}
{{ if not ($property.ReadOnly) -}}
func (class *{{ $class.GoName }}) SetProperty{{ $property.GoName }}(ctx context.Context, val {{ $property.SetterType }}) error  {
    return class.SetProperty(ctx, "{{ $property.Name }}", val)
}
{{ end }}
{{ end }}
{{ range $index, $method := $class.Methods }}
{{ if $method.ReturnType }}
func (class *{{ $class.GoName }}) {{ $method.GoName }}(ctx context.Context{{ range $index, $argumentType := $method.ArgumentTypes -}}, arg{{ $index }} {{ $argumentType }}{{ end }}) ({{ $method.ReturnType }}, error)  {
    res, err := class.CallMethod(ctx, "{{ $method.Name }}"{{ range $index, $argumentType := $method.ArgumentTypes -}}, arg{{ $index }}{{ end }})
    if err != nil {
        return {{ $method.ErrorValue }}, err
    }

    if res == nil {
        return {{ $method.ErrorValue }}, nil
    }

    return res.({{ $method.ReturnType }}), nil
}
{{ else }}
func (class *{{ $class.GoName }}) {{ $method.GoName }}(ctx context.Context{{ range $index, $argumentType := $method.ArgumentTypes -}}, arg{{ $index }} {{ $argumentType }}{{ end }}) error {
    _, err := class.CallMethod(ctx, "{{ $method.Name }}"{{ range $index, $argumentType := $method.ArgumentTypes -}}, arg{{ $index }}{{ end }})
    return err
}
{{ end }}
{{ end }}
{{ range $index, $method := $class.StaticMethods }}
{{ if $method.ReturnType }}
func (class *{{ $class.GoName }}) Static{{ $method.GoName }}(ctx context.Context{{ range $index, $argumentType := $method.ArgumentTypes -}}, arg{{ $index }} {{ $argumentType }}{{ end }}) ({{ $method.ReturnType }}, error)  {
    res, err := class.CallInstanceMethod(ctx, nil, "{{ $method.Name }}"{{ range $index, $argumentType := $method.ArgumentTypes -}}, arg{{ $index }}{{ end }})
    if err != nil {
        return {{ $method.ErrorValue }}, err
    }

    if res == nil {
        return {{ $method.ErrorValue }}, nil
    }

    return res.({{ $method.ReturnType }}), nil
}
func {{ $class.GoName }}Static{{ $method.GoName }}(e embind.Engine, ctx context.Context{{ range $index, $argumentType := $method.ArgumentTypes -}}, arg{{ $index }} {{ $argumentType }}{{ end }}) ({{ $method.ReturnType }}, error)  {
    res, err := e.CallStaticClassMethod(ctx, "{{ $class.Name }}", "{{ $method.Name }}"{{ range $index, $argumentType := $method.ArgumentTypes -}}, arg{{ $index }}{{ end }})
    if err != nil {
        return {{ $method.ErrorValue }}, err
    }

    if res == nil {
        return {{ $method.ErrorValue }}, nil
    }

    return res.({{ $method.ReturnType }}), nil
}
{{ else }}
func (class *{{ $class.GoName }}) Static{{ $method.GoName }}(ctx context.Context{{ range $index, $argumentType := $method.ArgumentTypes -}}, arg{{ $index }} {{ $argumentType }}{{ end }}) error {
    _, err := class.CallInstanceMethod(ctx, nil, "{{ $method.Name }}"{{ range $index, $argumentType := $method.ArgumentTypes -}}, arg{{ $index }}{{ end }})
    return err
}
func {{ $class.GoName }}Static{{ $method.GoName }}(e embind.Engine, ctx context.Context{{ range $index, $argumentType := $method.ArgumentTypes -}}, arg{{ $index }} {{ $argumentType }}{{ end }}) error {
    _, err := e.CallStaticClassMethod(ctx, "{{ $class.Name }}", "{{ $method.Name }}"{{ range $index, $argumentType := $method.ArgumentTypes -}}, arg{{ $index }}{{ end }})
    return err
}
{{ end }}
{{ end }}
{{ range $index, $property := $class.StaticProperties }}
func (class *{{ $class.GoName }}) GetStaticProperty{{ $property.GoName }}(ctx context.Context) ({{ $property.GetterType }}, error)  {
    res, err := class.GetInstanceProperty(ctx, nil, "{{ $property.Name }}")
    if err != nil {
        return {{ $property.ErrorValue }}, err
    }

	if res == nil {
		return {{ $property.ErrorValue }}, nil
	}

    return res.({{ $property.GetterType }}), nil
}
func {{ $class.GoName }}GetStaticProperty{{ $property.GoName }}(e embind.Engine, ctx context.Context) ({{ $property.GetterType }}, error)  {
    res, err := e.GetStaticClassProperty(ctx, "{{ $class.Name }}", "{{ $property.Name }}")
    if err != nil {
        return {{ $property.ErrorValue }}, err
    }

	if res == nil {
		return {{ $property.ErrorValue }}, nil
	}

    return res.({{ $property.GetterType }}), nil
}
{{ if not ($property.ReadOnly) -}}
func (class *{{ $class.GoName }}) SetStaticProperty{{ $property.GoName }}(ctx context.Context, val {{ $property.SetterType }}) error  {
    return class.SetInstanceProperty(ctx, nil, "{{ $property.Name }}", val)
}
func {{ $class.GoName }}SetStaticProperty{{ $property.GoName }}(e embind.Engine, ctx context.Context, val {{ $property.SetterType }}) error  {
    return e.SetStaticClassProperty(ctx, "{{ $class.Name }}", "{{ $property.Name }}", val)
}
{{ end }}
{{ end }}
{{ range $index, $constructor := $class.Constructors }}
func New{{ $class.GoName }}{{ $constructor.Name }}(e embind.Engine, ctx context.Context{{ range $index, $argumentType := $constructor.ArgumentTypes -}}, arg{{ $index }} {{ $argumentType }}{{ end }}) (*{{ $class.GoName }}, error) {
    res, err := e.CallPublicSymbol(ctx, "{{ $class.Name }}"{{ range $index, $argumentType := $constructor.ArgumentTypes -}}, arg{{ $index }}{{ end }})
    if err != nil {
        return nil, err
    }

	if res == nil {
		return nil, nil
	}

    return res.(*{{ $class.GoName }}), nil
}
{{ end }}
{{ end }}
