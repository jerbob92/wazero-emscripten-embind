// Code generated by wazero-emscripten-embind, DO NOT EDIT.
package generated

import (
	"context"

	"github.com/jerbob92/wazero-emscripten-embind"
)

type ClassMyClass struct {
	embind.ClassBase
}

func (class *ClassMyClass) GetX(ctx context.Context) (int32, error) {
	res, err := class.GetProperty(ctx, class, "x")
	if err != nil {
		return int32(0), err
	}

	return res.(int32), nil
}
func (class *ClassMyClass) SetX(ctx context.Context, val int32) error {
	return class.SetProperty(ctx, class, "x", val)
}

func (class *ClassMyClass) IncrementX(ctx context.Context) error {
	_, err := class.CallMethod(ctx, class, "incrementX")
	return err
}

func ClassMyClassStaticGetStringFromInstance(e embind.Engine, ctx context.Context, arg0 *ClassMyClass) (string, error) {
	res, err := e.CallStaticClassMethod(ctx, "MyClass", "getStringFromInstance", arg0)
	if err != nil {
		return "", err
	}

	return res.(string), nil
}

func NewClassMyClass(e embind.Engine, ctx context.Context, arg0 int32, arg1 string) (*ClassMyClass, error) {
	res, err := e.CallPublicSymbol(ctx, "MyClass", arg0, arg1)
	if err != nil {
		return nil, err
	}

	return res.(*ClassMyClass), nil
}
